All parameters are from Alexnet.
//----------------------------------------------------------------------------------------------------------------//
May add dot production for dense data flow to improve performance, but need to load dense weight in the later layer. 
When dense of weight is higher than 0.8, doing the sparsity detection.
//---------------------------------------------------------------------------------------------------------------//


Assuamption:
Wt, Ht will be set to each PE manually.// just for first Layer
boundary of k',c,a(dense flow is needed),w will be calculated in Testbench as input for convolutional layers (do not know FC).
For boundary of a in sparse data flow, will need number of data in compressed unit.
Wt and Ht are 4x to make the dataflow more easy.

Just cosider to immplement two convolutional layer, can normoalize later. (FC?)
each output feature map(as input in next layer, channel) need to be decided whether dense or sparse.(per kc)
//----------------------------------------------PPU--------------------------------------------------------//
conv_layer:
Flow: MaxPool(Relu(x)) = Relu(MaxPool(x)). Accumulator buffer drain data (drain one ? column) to maxpool module(3x3 pooling, may need buffer because stride is 2, or pipelining),
then RELU and evaulate number of zero, buffer to store whole feature map. //wrong
PPU_to_CNTL_in.data_flow_PPU is 0 or 1 maybe. depend on the sprsity of input.
After compressing the input or weight, make sure the totoal number of them is 4x(Fx or Ix) to make the dataflow more easy. padding zeros if it is necessary.

//-----------------------------------------------Dram------------------------------------------------------//
Simple model for Dram, 50 GB/s for SCNN in paper. 
have not decided if add FIFO between Dram and PE. Because clock_frequency of Dram is different with PE. 
Otherwiseï¼š
Assume clock_frequency is 1 GHZ (changeable). # of data=50*8/1/16=25 will be fetched in one clock cycle .